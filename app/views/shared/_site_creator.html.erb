<section class="site_creator">

	<div id="site_creator_main">
		<nav class="site_creator_nav">
			<a href="#" id="templates_link"><div class="creator_nav">Templates</div></a>
			<a href="#" id="creator_link"><div class="creator_nav">Features</div></a>
			<a href="#" id="summary_link"><div class="creator_nav">Summary</div></a>
		</nav>
		<section id="templates">
			TEMPLATES
			<!-- Insert The Templates, Open a Lightbox of the Image -->
		</section>

		<section id="creator">
			<div id="tools">
				<div id="tool_info">
					&nbsp;
					<!-- On Hover over a Tool, Present Information about that tool. -->
				</div>
				<div id="toolbox">
					<!-- Inserts all tools via erb -->
					<% @active_features.each do |f| %>
						<div class="tool" id="<%= f.css_id %>_tool">
							<div id="<%= f.css_id %>">
								<img src="/assets/icons/content_page.png" />
								<span><%= f.title %></span>
							</div>
						</div>
					<% end %>
				</div>
			</div>
			<div id="feature_list">
				<div id="sortable">
				</div>
			</div>
		</section>

		<section id="summary">
			SUMMARY
		</section>
	</div>
	<div id="mobile_preview">
	</div>
</section>
<section class="site_creator_modal">
	<div class=".alert"></div>
	<%= render :partial => 'shared/site_creator_forms' %>
</section>


<script>
$(document).ready(function() {

	var currentPath = window.location.pathname;
	var currentTab = "#templates"
	var limitations = {
		contact_feature: 1,
		content_page_feature: 10000,
		external_links_feature: 10000,
		image_gallery_feature: 1,
		introduction_feature: 1,
		rss_feed_feature: 10000,
		social_links_feature: 1
	};

	// Add 'basic_limited' limitations if that is the customer type or if it
	// is a preview session.
	if(currentPath.match(/\/site_creator_preview\/.+/) != null || "<%=j current_customer.customer_type %>" == "basic_limited") {
		limitations.content_page_feature = 3;
		limitations.external_links_feature = 3;
	}

	// Handle the Tabs 
	$("#templates_link, #creator_link, #summary_link").click(function(e) {
		e.preventDefault();

		var pathId = "#" + this.id.replace("_link", "");
		if(pathId != currentTab) {
			$(currentTab).hide();
			$(pathId).show();
			currentTab = pathId;
		}
	});

	// Set up the Draggable Elements in the Toolbox
	<% @feature_ids.each do |id| %>
		$("#<%= id %>" + "_tool").draggable({
			revert: "invalid",
			connectToSortable: "#sortable",
			helper: "clone"
		});

	<% end %>

	// Set up the Sortable List && Limitation Functionality
	var currentList = [];
	var map = {};
	var objectList = [];

	// Function to Handle the update and removal of each unique
	// object created with the program.
	// 
	// If feature is an Object, update or add it to the list
	// if it is a string (an id, remove it from the list)
	function manageObjects(feature) {
		console.log(feature);
		if(typeof feature == "object") {
			for(var i in objectList) {
				if(feature.form_id == objectList[i].form_id) {
					objectList[i] = feature;
				} else {
					objectList.push(feature);
				}
			}
		} else {
			for(var i in objectList) {
				if(feature == objectList[i].form_id) {
					objectList.splice(i, 1);
				}
			}
		}
	}

	// Function to Handle the Changing of CSS Depending on 
	// whether or not limitations have been met.
	function manageLimits(deleted) {
		deleted = deleted || false;
		if(deleted){
			deleted = deleted.replace(/_[0-9]+/, "");
		}

		currentList = $("#sortable").sortable("toArray");
		// Manage Limitations
		map = {};

		// Gather the current count for each feature
		for(var i = 0; i < currentList.length; i++) {
			if(map[currentList[i].replace(/_[0-9]+/, "")] != null) {
				map[currentList[i].replace(/_[0-9]+/, "")] += 1;
			}else{
				map[currentList[i].replace(/_[0-9]+/, "")] = 1;
			}
		}

		// Change CSS Accordingly
		for(var key in map) {
			if(map[key] == limitations[key]) {
				$("#" + key + "_tool").css("background", "#464646");
				$("#" + key + "_tool").draggable("disable");
			}
		}

		// Reset CSS If a Limit is no longer Met
		map[deleted] = map[deleted] || 0;
		if(deleted && map[deleted] < limitations[deleted]) {
			$("#" + deleted + "_tool").css("background", "pink");
			$("#" + deleted + "_tool").draggable("enable");
		}
	}

	// Create Sortable List
	var uniqCount = 1;

	$("#sortable").sortable({
		revert: true,
		update: function(event, ui) {
			var deleteHtml = $("<span>(X)</span>").click(function(e) {
				if(confirm("Are You Sure?")) {
					var id = this.parentElement.parentElement.id;
					this.parentElement.parentElement.remove();

					// Update the Map & Current Links Accordingly
					manageLimits(id);
				}
			});
			var editHtml = $("<span>(Edit)</span>").click(function(e) {
				var uniqId = this.parentElement.parentElement.id;
				var formDivId = "#" + uniqId.replace(/feature_[0-9]+/, "modal");

				var maskHeight = $(document).height();
				var maskWidth = $(window).width();

				$('.mask').css({"width":maskWidth, "height":maskHeight});

				$('.mask').fadeIn(500);
				$('.mask').fadeTo("slow", 0.8);

				var winH = $(window).height();
				var winW = $(window).width();

				$(".site_creator_modal").css('top', winH/2-$(".site_creator_modal").height()/2);
				$(".site_creator_modal").css('left', winW/2-$(".site_creator_modal").width()/2);

				$(".site_creator_modal").fadeIn(800);

				$(formDivId + " form").attr("class", uniqId);
				$(formDivId + " form").append("<input value=" + "'" + uniqId + "'" + "name='form_id' type='hidden' />");

				$(formDivId).show();

				$("." + uniqId).bind("ajax:success", function(e, data, status, xhr) {
					manageObjects(data);

					$(".mask").hide();
					$(formDivId).hide();
					$(".site_creator_modal").hide();
				});
			});

			var childId = ui.item[0].firstElementChild.id;
			
			$(ui.item[0].firstElementChild).append(editHtml);
			$(ui.item[0].firstElementChild).append(deleteHtml);
			$(ui.item[0]).attr("id", ui.item[0].firstElementChild.id + "_" + uniqCount.toString());
			$(ui.item[0].firstElementChild).removeAttr("id");
			uniqCount += 1;

			manageLimits();
		}
	});

	// Handle the Links and Modals that are Rendered Accordingly
});
</script>
